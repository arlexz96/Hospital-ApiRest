// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using assesment.Data;

#nullable disable

namespace assesment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("assesment.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("appointment_date");

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("available");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("description");

                    b.Property<int>("IdAppointmentReason")
                        .HasColumnType("int")
                        .HasColumnName("id_appointment_reasons");

                    b.Property<int>("IdSpeciality")
                        .HasColumnType("int")
                        .HasColumnName("id_speciality");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("id_user");

                    b.Property<int>("IdUserDoctor")
                        .HasColumnType("int")
                        .HasColumnName("id_user_doctor");

                    b.HasKey("Id");

                    b.HasIndex("IdAppointmentReason");

                    b.HasIndex("IdSpeciality");

                    b.HasIndex("IdUser");

                    b.HasIndex("IdUserDoctor");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentDate = new DateTime(2024, 11, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Available = true,
                            Description = "General Checkup",
                            IdAppointmentReason = 1,
                            IdSpeciality = 1,
                            IdUser = 1,
                            IdUserDoctor = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentDate = new DateTime(2024, 11, 21, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            Available = false,
                            Description = "Dental Cleaning",
                            IdAppointmentReason = 2,
                            IdSpeciality = 2,
                            IdUser = 2,
                            IdUserDoctor = 2
                        },
                        new
                        {
                            Id = 3,
                            AppointmentDate = new DateTime(2024, 11, 22, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Available = true,
                            Description = "Cardiology Consultation",
                            IdAppointmentReason = 3,
                            IdSpeciality = 3,
                            IdUser = 3,
                            IdUserDoctor = 3
                        },
                        new
                        {
                            Id = 4,
                            AppointmentDate = new DateTime(2024, 11, 23, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Available = true,
                            Description = "Dermatology Checkup",
                            IdAppointmentReason = 4,
                            IdSpeciality = 4,
                            IdUser = 4,
                            IdUserDoctor = 4
                        },
                        new
                        {
                            Id = 5,
                            AppointmentDate = new DateTime(2024, 11, 24, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Available = false,
                            Description = "Eye Examination",
                            IdAppointmentReason = 5,
                            IdSpeciality = 5,
                            IdUser = 5,
                            IdUserDoctor = 5
                        });
                });

            modelBuilder.Entity("assesment.Models.AppointmentReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("appointment_reasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Revisión de salud general"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Dolor en el pecho"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Problemas respiratorios"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Consulta de embarazo"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Consulta de rutina para niños"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Problemas de piel"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Dolor de cabeza recurrente"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Consulta dental"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Problemas de visión"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Ansiedad o problemas emocionales"
                        });
                });

            modelBuilder.Entity("assesment.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Available")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("available");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    b.Property<int>("IdTypeDocument")
                        .HasColumnType("int")
                        .HasColumnName("id_type_document");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("identification_number");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.HasIndex("IdTypeDocument");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Available = true,
                            Email = "juan.perez@example.com",
                            FirstName = "Juan",
                            IdRol = 2,
                            IdTypeDocument = 1,
                            IdentificationNumber = "123456789",
                            LastName = "Pérez",
                            Password = "f348d5628621f3d8f59c8cabda0f8eb0aa7e0514a90be7571020b1336f26c113"
                        },
                        new
                        {
                            Id = 2,
                            Available = true,
                            Email = "ana.gomez@example.com",
                            FirstName = "Ana",
                            IdRol = 2,
                            IdTypeDocument = 1,
                            IdentificationNumber = "987654321",
                            LastName = "Gómez",
                            Password = "49f267a17793be90862b8ee747596d4c68799dd040d976343c32e10e2d983883"
                        },
                        new
                        {
                            Id = 3,
                            Available = false,
                            Email = "luis.martinez@example.com",
                            FirstName = "Luis",
                            IdRol = 2,
                            IdTypeDocument = 2,
                            IdentificationNumber = "112233445",
                            LastName = "Martínez",
                            Password = "21274b285fa6de4de0cb8e8221c8b418f23039c0954edc891d13373e66ab2d92"
                        },
                        new
                        {
                            Id = 4,
                            Available = true,
                            Email = "isabel.lopez@example.com",
                            FirstName = "Isabel",
                            IdRol = 2,
                            IdTypeDocument = 3,
                            IdentificationNumber = "334455667",
                            LastName = "López",
                            Password = "25ae313f026983553a594aca3140572e5cae43165079a77a17b2b18e646fd3da"
                        },
                        new
                        {
                            Id = 5,
                            Available = false,
                            Email = "carlos.hernandez@example.com",
                            FirstName = "Carlos",
                            IdRol = 2,
                            IdTypeDocument = 4,
                            IdentificationNumber = "998877665",
                            LastName = "Hernández",
                            Password = "0d17b3b75a4b4ea56304172c81bd487a52676c8a0c1dd0818b7cdecce82d76b8"
                        });
                });

            modelBuilder.Entity("assesment.Models.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Médico"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Usuario"
                        });
                });

            modelBuilder.Entity("assesment.Models.Speciality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("specialities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Cardiología"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pediatría"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ginecología"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Dermatología"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Oftalmología"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Medicina General"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Neurología"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Traumatología"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Odontología"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Psiquiatría"
                        });
                });

            modelBuilder.Entity("assesment.Models.TypeDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("description");

                    b.HasKey("Id");

                    b.ToTable("types_document");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pasaporte"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Licencia de Conducir"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cédula de Identidad"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Número de Seguridad Social"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Certificado de Nacimiento"
                        });
                });

            modelBuilder.Entity("assesment.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<int>("IdRol")
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    b.Property<int>("IdTypeDocument")
                        .HasColumnType("int")
                        .HasColumnName("id_type_document");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("identification_number");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.HasIndex("IdTypeDocument");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "juan@example.com",
                            FirstName = "Juan",
                            IdRol = 3,
                            IdTypeDocument = 1,
                            IdentificationNumber = "123456789",
                            LastName = "Pérez",
                            Password = "b3d17ebbe4f2b75d27b6309cfaae1487b667301a73951e7d523a039cd2dfe110"
                        },
                        new
                        {
                            Id = 2,
                            Email = "ana@example.com",
                            FirstName = "Ana",
                            IdRol = 3,
                            IdTypeDocument = 1,
                            IdentificationNumber = "987654321",
                            LastName = "Gómez",
                            Password = "c6ba91b90d922e159893f46c387e5dc1b3dc5c101a5a4522f03b987177a24a91"
                        },
                        new
                        {
                            Id = 3,
                            Email = "luis@example.com",
                            FirstName = "Luis",
                            IdRol = 3,
                            IdTypeDocument = 2,
                            IdentificationNumber = "112233445",
                            LastName = "Martínez",
                            Password = "98bbb2f3c8ffa8e403751db051f7b5a31498137940e50b01d237557a89bdd124"
                        },
                        new
                        {
                            Id = 4,
                            Email = "marta@example.com",
                            FirstName = "Marta",
                            IdRol = 3,
                            IdTypeDocument = 3,
                            IdentificationNumber = "556677889",
                            LastName = "Rodríguez",
                            Password = "9323dd6786ebcbf3ac87357cc78ba1abfda6cf5e55cd01097b90d4a286cac90e"
                        },
                        new
                        {
                            Id = 5,
                            Email = "carlos@example.com",
                            FirstName = "Carlos",
                            IdRol = 3,
                            IdTypeDocument = 4,
                            IdentificationNumber = "998877665",
                            LastName = "Hernández",
                            Password = "48caafb68583936afd0d78a7bfd7046d2492fad94f3c485915f74bb60128620d"
                        },
                        new
                        {
                            Id = 6,
                            Email = "roberto@example.com",
                            FirstName = "Roberto",
                            IdRol = 3,
                            IdTypeDocument = 1,
                            IdentificationNumber = "223344556",
                            LastName = "Suárez",
                            Password = "33631376724e5d5480fa397dfcf03b66ad47b934ab495174d7058c38f2bb0087"
                        },
                        new
                        {
                            Id = 7,
                            Email = "isabel@example.com",
                            FirstName = "Isabel",
                            IdRol = 3,
                            IdTypeDocument = 2,
                            IdentificationNumber = "334455667",
                            LastName = "López",
                            Password = "d42ba32b8703fe9bcffc5c16b6c5679363d595724c63a0ed111ac59a1d467070"
                        },
                        new
                        {
                            Id = 8,
                            Email = "juan2@example.com",
                            FirstName = "Juan",
                            IdRol = 3,
                            IdTypeDocument = 3,
                            IdentificationNumber = "445566778",
                            LastName = "García",
                            Password = "4fa29f8e091719146327604cc5d6e112b1999134dbefbf05f991f5c0fd648017"
                        },
                        new
                        {
                            Id = 9,
                            Email = "teresa@example.com",
                            FirstName = "Teresa",
                            IdRol = 3,
                            IdTypeDocument = 4,
                            IdentificationNumber = "556677889",
                            LastName = "Fernández",
                            Password = "f11026cad6ec0b7bbe12d040560218f64c02cd99d9b2b47838ba081f1f54f0d4"
                        },
                        new
                        {
                            Id = 10,
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IdRol = 1,
                            IdTypeDocument = 1,
                            IdentificationNumber = "123123123",
                            LastName = "Admin",
                            Password = "d9669c67bd3466e31fe39a7f2b6b4792df26138ef859f1e2cad50d9f9b288378"
                        });
                });

            modelBuilder.Entity("assesment.Models.Appointment", b =>
                {
                    b.HasOne("assesment.Models.AppointmentReason", "AppointmentReason")
                        .WithMany()
                        .HasForeignKey("IdAppointmentReason")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assesment.Models.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("IdSpeciality")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assesment.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assesment.Models.User", "UserDoctor")
                        .WithMany()
                        .HasForeignKey("IdUserDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentReason");

                    b.Navigation("Speciality");

                    b.Navigation("User");

                    b.Navigation("UserDoctor");
                });

            modelBuilder.Entity("assesment.Models.Doctor", b =>
                {
                    b.HasOne("assesment.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assesment.Models.TypeDocument", "TypeDocument")
                        .WithMany()
                        .HasForeignKey("IdTypeDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("TypeDocument");
                });

            modelBuilder.Entity("assesment.Models.User", b =>
                {
                    b.HasOne("assesment.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("assesment.Models.TypeDocument", "TypeDocument")
                        .WithMany()
                        .HasForeignKey("IdTypeDocument")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("TypeDocument");
                });
#pragma warning restore 612, 618
        }
    }
}
